
jourJf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bfc  08003bfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c04  08003c04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000248  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac7c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018bf  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f965  00000000  00000000  0002d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a38a  00000000  00000000  0004cfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0acb  00000000  00000000  0005736f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117e3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002394  00000000  00000000  00117e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bc4 	.word	0x08003bc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003bc4 	.word	0x08003bc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UART_RxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80004d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <HAL_UART_RxCpltCallback+0x1c>)
 80004da:	f001 fbea 	bl	8001cb2 <HAL_GPIO_TogglePin>
	//HAL_SPI_Transmit_DMA(&hspi1, &UartRx, 1);
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020c00 	.word	0x40020c00

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fca4 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f812 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f920 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 f8d8 	bl	80006b0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000500:	f000 f876 	bl	80005f0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f8aa 	bl	800065c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  HAL_UART_Receive_DMA(&huart3, &UartRx, 5);
 8000508:	2205      	movs	r2, #5
 800050a:	4902      	ldr	r1, [pc, #8]	; (8000514 <main+0x28>)
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <main+0x2c>)
 800050e:	f002 fa78 	bl	8002a02 <HAL_UART_Receive_DMA>
	  //HAL_SPI_Receive_DMA(&hspi1, &uartSize, 1);
	  //HAL_UART_Receive_DMA(&huart3, &UartRx, 1);
	  //HAL_SPI_Receive_DMA(&hspi1, &spiRx, spiSize);
  while (1)
 8000512:	e7fe      	b.n	8000512 <main+0x26>
 8000514:	20000244 	.word	0x20000244
 8000518:	20000140 	.word	0x20000140

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fb42 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2310      	movs	r3, #16
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fba1 	bl	8001ce8 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f9d6 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2105      	movs	r1, #5
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fe02 	bl	80021d8 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f9bf 	bl	800095c <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_SPI1_Init+0x64>)
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <MX_SPI1_Init+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_SPI1_Init+0x64>)
 80005fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_SPI1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_SPI1_Init+0x64>)
 800061c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000620:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_SPI1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_SPI1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_SPI1_Init+0x64>)
 800063c:	220a      	movs	r2, #10
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_SPI1_Init+0x64>)
 8000642:	f001 ffe9 	bl	8002618 <HAL_SPI_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800064c:	f000 f986 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000028 	.word	0x20000028
 8000658:	40013000 	.word	0x40013000

0800065c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_USART3_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART3_UART_Init+0x4c>)
 8000694:	f002 f968 	bl	8002968 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 f95d 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000140 	.word	0x20000140
 80006ac:	40004800 	.word	0x40004800

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_DMA_Init+0x88>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_DMA_Init+0x88>)
 80006c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_DMA_Init+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_DMA_Init+0x88>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_DMA_Init+0x88>)
 80006dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_DMA_Init+0x88>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	200c      	movs	r0, #12
 80006f4:	f000 fcef 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006f8:	200c      	movs	r0, #12
 80006fa:	f000 fd08 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200e      	movs	r0, #14
 8000704:	f000 fce7 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000708:	200e      	movs	r0, #14
 800070a:	f000 fd00 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2038      	movs	r0, #56	; 0x38
 8000714:	f000 fcdf 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000718:	2038      	movs	r0, #56	; 0x38
 800071a:	f000 fcf8 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	203b      	movs	r0, #59	; 0x3b
 8000724:	f000 fcd7 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000728:	203b      	movs	r0, #59	; 0x3b
 800072a:	f000 fcf0 	bl	800110e <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b7c      	ldr	r3, [pc, #496]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a7b      	ldr	r2, [pc, #492]	; (8000948 <MX_GPIO_Init+0x20c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b79      	ldr	r3, [pc, #484]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b75      	ldr	r3, [pc, #468]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a74      	ldr	r2, [pc, #464]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b72      	ldr	r3, [pc, #456]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b6e      	ldr	r3, [pc, #440]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6d      	ldr	r2, [pc, #436]	; (8000948 <MX_GPIO_Init+0x20c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b6b      	ldr	r3, [pc, #428]	; (8000948 <MX_GPIO_Init+0x20c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b67      	ldr	r3, [pc, #412]	; (8000948 <MX_GPIO_Init+0x20c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a66      	ldr	r2, [pc, #408]	; (8000948 <MX_GPIO_Init+0x20c>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b64      	ldr	r3, [pc, #400]	; (8000948 <MX_GPIO_Init+0x20c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b60      	ldr	r3, [pc, #384]	; (8000948 <MX_GPIO_Init+0x20c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5f      	ldr	r2, [pc, #380]	; (8000948 <MX_GPIO_Init+0x20c>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <MX_GPIO_Init+0x20c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2101      	movs	r1, #1
 80007e2:	485a      	ldr	r0, [pc, #360]	; (800094c <MX_GPIO_Init+0x210>)
 80007e4:	f001 fa4c 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007ee:	4858      	ldr	r0, [pc, #352]	; (8000950 <MX_GPIO_Init+0x214>)
 80007f0:	f001 fa46 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4850      	ldr	r0, [pc, #320]	; (800094c <MX_GPIO_Init+0x210>)
 800080c:	f001 f89c 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000810:	2308      	movs	r3, #8
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000820:	2305      	movs	r3, #5
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4848      	ldr	r0, [pc, #288]	; (800094c <MX_GPIO_Init+0x210>)
 800082c:	f001 f88c 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000834:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4843      	ldr	r0, [pc, #268]	; (8000954 <MX_GPIO_Init+0x218>)
 8000846:	f001 f87f 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084a:	2310      	movs	r3, #16
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085a:	2306      	movs	r3, #6
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	483b      	ldr	r0, [pc, #236]	; (8000954 <MX_GPIO_Init+0x218>)
 8000866:	f001 f86f 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <MX_GPIO_Init+0x21c>)
 800087e:	f001 f863 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000894:	2305      	movs	r3, #5
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	482e      	ldr	r0, [pc, #184]	; (8000958 <MX_GPIO_Init+0x21c>)
 80008a0:	f001 f852 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80008a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4824      	ldr	r0, [pc, #144]	; (8000950 <MX_GPIO_Init+0x214>)
 80008be:	f001 f843 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d4:	2306      	movs	r3, #6
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <MX_GPIO_Init+0x210>)
 80008e0:	f001 f832 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4816      	ldr	r0, [pc, #88]	; (8000954 <MX_GPIO_Init+0x218>)
 80008fa:	f001 f825 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000910:	230a      	movs	r3, #10
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_GPIO_Init+0x218>)
 800091c:	f001 f814 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SCL_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000924:	2312      	movs	r3, #18
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000930:	2304      	movs	r3, #4
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_GPIO_Init+0x21c>)
 800093c:	f001 f804 	bl	8001948 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020000 	.word	0x40020000
 8000958:	40020400 	.word	0x40020400

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a6:	2007      	movs	r0, #7
 80009a8:	f000 fb8a 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a55      	ldr	r2, [pc, #340]	; (8000b2c <HAL_SPI_MspInit+0x174>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	f040 80a3 	bne.w	8000b22 <HAL_SPI_MspInit+0x16a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <HAL_SPI_MspInit+0x178>)
 80009e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e4:	4a52      	ldr	r2, [pc, #328]	; (8000b30 <HAL_SPI_MspInit+0x178>)
 80009e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ea:	6453      	str	r3, [r2, #68]	; 0x44
 80009ec:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <HAL_SPI_MspInit+0x178>)
 80009ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <HAL_SPI_MspInit+0x178>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a4b      	ldr	r2, [pc, #300]	; (8000b30 <HAL_SPI_MspInit+0x178>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <HAL_SPI_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a14:	23e0      	movs	r3, #224	; 0xe0
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a24:	2305      	movs	r3, #5
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4841      	ldr	r0, [pc, #260]	; (8000b34 <HAL_SPI_MspInit+0x17c>)
 8000a30:	f000 ff8a 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a46:	2305      	movs	r3, #5
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4838      	ldr	r0, [pc, #224]	; (8000b34 <HAL_SPI_MspInit+0x17c>)
 8000a52:	f000 ff79 	bl	8001948 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a58:	4a38      	ldr	r2, [pc, #224]	; (8000b3c <HAL_SPI_MspInit+0x184>)
 8000a5a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a5e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a62:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a64:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a76:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a84:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a8a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a98:	4827      	ldr	r0, [pc, #156]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000a9a:	f000 fb53 	bl	8001144 <HAL_DMA_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_SPI_MspInit+0xf0>
    {
      Error_Handler();
 8000aa4:	f7ff ff5a 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000aac:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aae:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <HAL_SPI_MspInit+0x180>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <HAL_SPI_MspInit+0x18c>)
 8000ab8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000abc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ac0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000ac4:	2240      	movs	r2, #64	; 0x40
 8000ac6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000af8:	f000 fb24 	bl	8001144 <HAL_DMA_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000b02:	f7ff ff2b 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000b0a:	649a      	str	r2, [r3, #72]	; 0x48
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <HAL_SPI_MspInit+0x188>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2023      	movs	r0, #35	; 0x23
 8000b18:	f000 fadd 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b1c:	2023      	movs	r0, #35	; 0x23
 8000b1e:	f000 faf6 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013000 	.word	0x40013000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	40026410 	.word	0x40026410
 8000b40:	200000e0 	.word	0x200000e0
 8000b44:	40026458 	.word	0x40026458

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a5c      	ldr	r2, [pc, #368]	; (8000cd8 <HAL_UART_MspInit+0x190>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	f040 80b2 	bne.w	8000cd0 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a59      	ldr	r2, [pc, #356]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b57      	ldr	r3, [pc, #348]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b53      	ldr	r3, [pc, #332]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a52      	ldr	r2, [pc, #328]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b50      	ldr	r3, [pc, #320]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b4c      	ldr	r3, [pc, #304]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a4b      	ldr	r2, [pc, #300]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b49      	ldr	r3, [pc, #292]	; (8000cdc <HAL_UART_MspInit+0x194>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4840      	ldr	r0, [pc, #256]	; (8000ce0 <HAL_UART_MspInit+0x198>)
 8000bde:	f000 feb3 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4839      	ldr	r0, [pc, #228]	; (8000ce4 <HAL_UART_MspInit+0x19c>)
 8000c00:	f000 fea2 	bl	8001948 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c06:	4a39      	ldr	r2, [pc, #228]	; (8000cec <HAL_UART_MspInit+0x1a4>)
 8000c08:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c10:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c12:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c38:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c46:	4828      	ldr	r0, [pc, #160]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c48:	f000 fa7c 	bl	8001144 <HAL_DMA_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000c52:	f7ff fe83 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_UART_MspInit+0x1a0>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c64:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <HAL_UART_MspInit+0x1ac>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c72:	2240      	movs	r2, #64	; 0x40
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c82:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000ca6:	f000 fa4d 	bl	8001144 <HAL_DMA_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8000cb0:	f7ff fe54 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_UART_MspInit+0x1a8>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2027      	movs	r0, #39	; 0x27
 8000cc6:	f000 fa06 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cca:	2027      	movs	r0, #39	; 0x27
 8000ccc:	f000 fa1f 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	20000184 	.word	0x20000184
 8000cec:	40026028 	.word	0x40026028
 8000cf0:	200001e4 	.word	0x200001e4
 8000cf4:	40026058 	.word	0x40026058

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f8cc 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <DMA1_Stream1_IRQHandler+0x10>)
 8000d52:	f000 fb8f 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000184 	.word	0x20000184

08000d60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <DMA1_Stream3_IRQHandler+0x10>)
 8000d66:	f000 fb85 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001e4 	.word	0x200001e4

08000d74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <SPI1_IRQHandler+0x10>)
 8000d7a:	f001 fcd7 	bl	800272c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000028 	.word	0x20000028

08000d88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART3_IRQHandler+0x10>)
 8000d8e:	f001 fe69 	bl	8002a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000140 	.word	0x20000140

08000d9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <DMA2_Stream0_IRQHandler+0x10>)
 8000da2:	f000 fb67 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000080 	.word	0x20000080

08000db0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <DMA2_Stream3_IRQHandler+0x10>)
 8000db6:	f000 fb5d 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000e0 	.word	0x200000e0

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f002 fea9 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb67 	bl	80004ec <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e2c:	08003c0c 	.word	0x08003c0c
  ldr r2, =_sbss
 8000e30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e34:	20000254 	.word	0x20000254

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f92b 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fd7a 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f943 	bl	800112a <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f90b 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000250 	.word	0x20000250

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000250 	.word	0x20000250

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff feda 	bl	8000f08 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e099      	b.n	8001294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2202      	movs	r2, #2
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001180:	e00f      	b.n	80011a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001182:	f7ff fec1 	bl	8000f08 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b05      	cmp	r3, #5
 800118e:	d908      	bls.n	80011a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2220      	movs	r2, #32
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2203      	movs	r2, #3
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e078      	b.n	8001294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e8      	bne.n	8001182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_DMA_Init+0x158>)
 80011bc:	4013      	ands	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d107      	bne.n	800120c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4313      	orrs	r3, r2
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4313      	orrs	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f023 0307 	bic.w	r3, r3, #7
 8001222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	4313      	orrs	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	2b04      	cmp	r3, #4
 8001234:	d117      	bne.n	8001266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4313      	orrs	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00e      	beq.n	8001266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fb01 	bl	8001850 <DMA_CheckFifoParam>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001262:	2301      	movs	r3, #1
 8001264:	e016      	b.n	8001294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fab8 	bl	80017e4 <DMA_CalcBaseAndBitshift>
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127c:	223f      	movs	r2, #63	; 0x3f
 800127e:	409a      	lsls	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	f010803f 	.word	0xf010803f

080012a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_DMA_Start_IT+0x26>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e040      	b.n	8001348 <HAL_DMA_Start_IT+0xa8>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12f      	bne.n	800133a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 fa4a 	bl	8001788 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	223f      	movs	r2, #63	; 0x3f
 80012fa:	409a      	lsls	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0216 	orr.w	r2, r2, #22
 800130e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0208 	orr.w	r2, r2, #8
 8001326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e005      	b.n	8001346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001342:	2302      	movs	r3, #2
 8001344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001346:	7dfb      	ldrb	r3, [r7, #23]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800135e:	f7ff fdd3 	bl	8000f08 <HAL_GetTick>
 8001362:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d008      	beq.n	8001382 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e052      	b.n	8001428 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0216 	bic.w	r2, r2, #22
 8001390:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_DMA_Abort+0x62>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0208 	bic.w	r2, r2, #8
 80013c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d2:	e013      	b.n	80013fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013d4:	f7ff fd98 	bl	8000f08 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d90c      	bls.n	80013fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2220      	movs	r2, #32
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2203      	movs	r2, #3
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e015      	b.n	8001428 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e4      	bne.n	80013d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140e:	223f      	movs	r2, #63	; 0x3f
 8001410:	409a      	lsls	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d004      	beq.n	800144e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00c      	b.n	8001468 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2205      	movs	r2, #5
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001480:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <HAL_DMA_IRQHandler+0x248>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a8e      	ldr	r2, [pc, #568]	; (80016c0 <HAL_DMA_IRQHandler+0x24c>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0a9b      	lsrs	r3, r3, #10
 800148c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	2208      	movs	r2, #8
 80014a0:	409a      	lsls	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01a      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014cc:	2208      	movs	r2, #8
 80014ce:	409a      	lsls	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	2201      	movs	r2, #1
 80014e6:	409a      	lsls	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d012      	beq.n	8001516 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2201      	movs	r2, #1
 8001504:	409a      	lsls	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	f043 0202 	orr.w	r2, r3, #2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2204      	movs	r2, #4
 800151c:	409a      	lsls	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d012      	beq.n	800154c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	2204      	movs	r2, #4
 800153a:	409a      	lsls	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001544:	f043 0204 	orr.w	r2, r3, #4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	2210      	movs	r2, #16
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d043      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d03c      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156e:	2210      	movs	r2, #16
 8001570:	409a      	lsls	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d018      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d108      	bne.n	80015a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d024      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
 80015a2:	e01f      	b.n	80015e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01b      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
 80015b4:	e016      	b.n	80015e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d107      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0208 	bic.w	r2, r2, #8
 80015d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	2220      	movs	r2, #32
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 808f 	beq.w	8001714 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 8087 	beq.w	8001714 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2220      	movs	r2, #32
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b05      	cmp	r3, #5
 800161c:	d136      	bne.n	800168c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0216 	bic.w	r2, r2, #22
 800162c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800163c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <HAL_DMA_IRQHandler+0x1da>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0208 	bic.w	r2, r2, #8
 800165c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	223f      	movs	r2, #63	; 0x3f
 8001664:	409a      	lsls	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167e:	2b00      	cmp	r3, #0
 8001680:	d07e      	beq.n	8001780 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
        }
        return;
 800168a:	e079      	b.n	8001780 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01d      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d031      	beq.n	8001714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e02c      	b.n	8001714 <HAL_DMA_IRQHandler+0x2a0>
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000
 80016c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
 80016d4:	e01e      	b.n	8001714 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10f      	bne.n	8001704 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0210 	bic.w	r2, r2, #16
 80016f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	2b00      	cmp	r3, #0
 800171a:	d032      	beq.n	8001782 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d022      	beq.n	800176e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2205      	movs	r2, #5
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3301      	adds	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	d307      	bcc.n	800175c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f2      	bne.n	8001740 <HAL_DMA_IRQHandler+0x2cc>
 800175a:	e000      	b.n	800175e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800175c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
 800177e:	e000      	b.n	8001782 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001780:	bf00      	nop
    }
  }
}
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b40      	cmp	r3, #64	; 0x40
 80017b4:	d108      	bne.n	80017c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017c6:	e007      	b.n	80017d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	3b10      	subs	r3, #16
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <DMA_CalcBaseAndBitshift+0x64>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <DMA_CalcBaseAndBitshift+0x68>)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d909      	bls.n	8001826 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	1d1a      	adds	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	659a      	str	r2, [r3, #88]	; 0x58
 8001824:	e007      	b.n	8001836 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	aaaaaaab 	.word	0xaaaaaaab
 800184c:	08003bf4 	.word	0x08003bf4

08001850 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d11f      	bne.n	80018aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d856      	bhi.n	800191e <DMA_CheckFifoParam+0xce>
 8001870:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <DMA_CheckFifoParam+0x28>)
 8001872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001876:	bf00      	nop
 8001878:	08001889 	.word	0x08001889
 800187c:	0800189b 	.word	0x0800189b
 8001880:	08001889 	.word	0x08001889
 8001884:	0800191f 	.word	0x0800191f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d046      	beq.n	8001922 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001898:	e043      	b.n	8001922 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018a2:	d140      	bne.n	8001926 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a8:	e03d      	b.n	8001926 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b2:	d121      	bne.n	80018f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d837      	bhi.n	800192a <DMA_CheckFifoParam+0xda>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <DMA_CheckFifoParam+0x70>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018d1 	.word	0x080018d1
 80018c4:	080018d7 	.word	0x080018d7
 80018c8:	080018d1 	.word	0x080018d1
 80018cc:	080018e9 	.word	0x080018e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
      break;
 80018d4:	e030      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d025      	beq.n	800192e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e6:	e022      	b.n	800192e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018f0:	d11f      	bne.n	8001932 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018f6:	e01c      	b.n	8001932 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d903      	bls.n	8001906 <DMA_CheckFifoParam+0xb6>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d003      	beq.n	800190c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001904:	e018      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
      break;
 800190a:	e015      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00e      	beq.n	8001936 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
      break;
 800191c:	e00b      	b.n	8001936 <DMA_CheckFifoParam+0xe6>
      break;
 800191e:	bf00      	nop
 8001920:	e00a      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      break;
 8001922:	bf00      	nop
 8001924:	e008      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      break;
 8001926:	bf00      	nop
 8001928:	e006      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      break;
 800192a:	bf00      	nop
 800192c:	e004      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      break;
 800192e:	bf00      	nop
 8001930:	e002      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      break;   
 8001932:	bf00      	nop
 8001934:	e000      	b.n	8001938 <DMA_CheckFifoParam+0xe8>
      break;
 8001936:	bf00      	nop
    }
  } 
  
  return status; 
 8001938:	7bfb      	ldrb	r3, [r7, #15]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e16b      	b.n	8001c3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 815a 	bne.w	8001c36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d005      	beq.n	800199a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001996:	2b02      	cmp	r3, #2
 8001998:	d130      	bne.n	80019fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0201 	and.w	r2, r3, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d017      	beq.n	8001a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80b4 	beq.w	8001c36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <HAL_GPIO_Init+0x30c>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a5f      	ldr	r2, [pc, #380]	; (8001c54 <HAL_GPIO_Init+0x30c>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_GPIO_Init+0x30c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a5b      	ldr	r2, [pc, #364]	; (8001c58 <HAL_GPIO_Init+0x310>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_GPIO_Init+0x314>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d02b      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_GPIO_Init+0x318>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d025      	beq.n	8001b6a <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a50      	ldr	r2, [pc, #320]	; (8001c64 <HAL_GPIO_Init+0x31c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01f      	beq.n	8001b66 <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4f      	ldr	r2, [pc, #316]	; (8001c68 <HAL_GPIO_Init+0x320>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4e      	ldr	r2, [pc, #312]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x216>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4d      	ldr	r2, [pc, #308]	; (8001c70 <HAL_GPIO_Init+0x328>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x212>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <HAL_GPIO_Init+0x32c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x20e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x20a>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e00e      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b52:	2308      	movs	r3, #8
 8001b54:	e00c      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00a      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b80:	4935      	ldr	r1, [pc, #212]	; (8001c58 <HAL_GPIO_Init+0x310>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb2:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	f67f ae90 	bls.w	8001964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40021c00 	.word	0x40021c00
 8001c7c:	40013c00 	.word	0x40013c00

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	041a      	lsls	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	041a      	lsls	r2, r3, #16
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e267      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d075      	beq.n	8001df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d06:	4b88      	ldr	r3, [pc, #544]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d00c      	beq.n	8001d2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d112      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d2a:	d10b      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	4b7e      	ldr	r3, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05b      	beq.n	8001df0 <HAL_RCC_OscConfig+0x108>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d157      	bne.n	8001df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e242      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4c:	d106      	bne.n	8001d5c <HAL_RCC_OscConfig+0x74>
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a75      	ldr	r2, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x98>
 8001d66:	4b70      	ldr	r3, [pc, #448]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6f      	ldr	r2, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6c      	ldr	r2, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d80:	4b69      	ldr	r3, [pc, #420]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a65      	ldr	r2, [pc, #404]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff f8b2 	bl	8000f08 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f8ae 	bl	8000f08 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e207      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xc0>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f89e 	bl	8000f08 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f89a 	bl	8000f08 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1f3      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xe8>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d063      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d11c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b44      	ldr	r3, [pc, #272]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x152>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e1c7      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4937      	ldr	r1, [pc, #220]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	e03a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x244>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff f853 	bl	8000f08 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e66:	f7ff f84f 	bl	8000f08 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1a8      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4925      	ldr	r1, [pc, #148]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_OscConfig+0x244>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f832 	bl	8000f08 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f82e 	bl	8000f08 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e187      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d036      	beq.n	8001f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d016      	beq.n	8001f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_RCC_OscConfig+0x248>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f812 	bl	8000f08 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7ff f80e 	bl	8000f08 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e167      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_OscConfig+0x240>)
 8001efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x200>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_OscConfig+0x248>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fffb 	bl	8000f08 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	e00e      	b.n	8001f34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe fff7 	bl	8000f08 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d907      	bls.n	8001f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e150      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	42470000 	.word	0x42470000
 8001f30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ea      	bne.n	8001f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8097 	beq.w	800207c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a7c      	ldr	r2, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b77      	ldr	r3, [pc, #476]	; (800215c <HAL_RCC_OscConfig+0x474>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d118      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4b74      	ldr	r3, [pc, #464]	; (800215c <HAL_RCC_OscConfig+0x474>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a73      	ldr	r2, [pc, #460]	; (800215c <HAL_RCC_OscConfig+0x474>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe ffb7 	bl	8000f08 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7fe ffb3 	bl	8000f08 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e10c      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_OscConfig+0x474>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2ea>
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a63      	ldr	r2, [pc, #396]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x324>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x30c>
 8001fda:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a5e      	ldr	r2, [pc, #376]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a5b      	ldr	r2, [pc, #364]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x324>
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a57      	ldr	r2, [pc, #348]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8002000:	4b55      	ldr	r3, [pc, #340]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d015      	beq.n	8002040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7fe ff78 	bl	8000f08 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	e00a      	b.n	8002032 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7fe ff74 	bl	8000f08 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0cb      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	4b49      	ldr	r3, [pc, #292]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0ee      	beq.n	800201c <HAL_RCC_OscConfig+0x334>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7fe ff62 	bl	8000f08 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe ff5e 	bl	8000f08 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0b5      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ee      	bne.n	8002048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a1 	beq.w	80021c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	d05c      	beq.n	800214c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d141      	bne.n	800211e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b31      	ldr	r3, [pc, #196]	; (8002160 <HAL_RCC_OscConfig+0x478>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe ff32 	bl	8000f08 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe ff2e 	bl	8000f08 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e087      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	019b      	lsls	r3, r3, #6
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	085b      	lsrs	r3, r3, #1
 80020de:	3b01      	subs	r3, #1
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	491b      	ldr	r1, [pc, #108]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x478>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe ff07 	bl	8000f08 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe ff03 	bl	8000f08 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e05c      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x416>
 800211c:	e054      	b.n	80021c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_RCC_OscConfig+0x478>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe fef0 	bl	8000f08 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe feec 	bl	8000f08 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e045      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_OscConfig+0x470>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x444>
 800214a:	e03d      	b.n	80021c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e038      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000
 8002160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x4ec>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d028      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d121      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d11a      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800219a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800219c:	4293      	cmp	r3, r2
 800219e:	d111      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	085b      	lsrs	r3, r3, #1
 80021ac:	3b01      	subs	r3, #1
 80021ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0cc      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d90c      	bls.n	8002214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800224e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d044      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e067      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4934      	ldr	r1, [pc, #208]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fe1e 	bl	8000f08 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fe1a 	bl	8000f08 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e04f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d20c      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f821 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	490a      	ldr	r1, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fd7e 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00
 8002394:	40023800 	.word	0x40023800
 8002398:	08003bdc 	.word	0x08003bdc
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a8:	b094      	sub	sp, #80	; 0x50
 80023aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
 80023b0:	2300      	movs	r3, #0
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d00d      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x40>
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	f200 80e1 	bhi.w	8002590 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x34>
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d003      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x3a>
 80023d6:	e0db      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023dc:	e0db      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023de:	4b73      	ldr	r3, [pc, #460]	; (80025ac <HAL_RCC_GetSysClockFreq+0x208>)
 80023e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023e2:	e0d8      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e4:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ee:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fa:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	2200      	movs	r2, #0
 8002402:	63bb      	str	r3, [r7, #56]	; 0x38
 8002404:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
 8002412:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002416:	4622      	mov	r2, r4
 8002418:	462b      	mov	r3, r5
 800241a:	f04f 0000 	mov.w	r0, #0
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	0159      	lsls	r1, r3, #5
 8002424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002428:	0150      	lsls	r0, r2, #5
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4621      	mov	r1, r4
 8002430:	1a51      	subs	r1, r2, r1
 8002432:	6139      	str	r1, [r7, #16]
 8002434:	4629      	mov	r1, r5
 8002436:	eb63 0301 	sbc.w	r3, r3, r1
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002448:	4659      	mov	r1, fp
 800244a:	018b      	lsls	r3, r1, #6
 800244c:	4651      	mov	r1, sl
 800244e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002452:	4651      	mov	r1, sl
 8002454:	018a      	lsls	r2, r1, #6
 8002456:	4651      	mov	r1, sl
 8002458:	ebb2 0801 	subs.w	r8, r2, r1
 800245c:	4659      	mov	r1, fp
 800245e:	eb63 0901 	sbc.w	r9, r3, r1
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800246e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002476:	4690      	mov	r8, r2
 8002478:	4699      	mov	r9, r3
 800247a:	4623      	mov	r3, r4
 800247c:	eb18 0303 	adds.w	r3, r8, r3
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	462b      	mov	r3, r5
 8002484:	eb49 0303 	adc.w	r3, r9, r3
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002496:	4629      	mov	r1, r5
 8002498:	024b      	lsls	r3, r1, #9
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024a0:	4621      	mov	r1, r4
 80024a2:	024a      	lsls	r2, r1, #9
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024aa:	2200      	movs	r2, #0
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024b4:	f7fd fe88 	bl	80001c8 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c0:	e058      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	2200      	movs	r2, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	4611      	mov	r1, r2
 80024ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024d2:	623b      	str	r3, [r7, #32]
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
 80024d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024dc:	4642      	mov	r2, r8
 80024de:	464b      	mov	r3, r9
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	0159      	lsls	r1, r3, #5
 80024ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ee:	0150      	lsls	r0, r2, #5
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4641      	mov	r1, r8
 80024f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80024fa:	4649      	mov	r1, r9
 80024fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800250c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002510:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002514:	ebb2 040a 	subs.w	r4, r2, sl
 8002518:	eb63 050b 	sbc.w	r5, r3, fp
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	00eb      	lsls	r3, r5, #3
 8002526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800252a:	00e2      	lsls	r2, r4, #3
 800252c:	4614      	mov	r4, r2
 800252e:	461d      	mov	r5, r3
 8002530:	4643      	mov	r3, r8
 8002532:	18e3      	adds	r3, r4, r3
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	464b      	mov	r3, r9
 8002538:	eb45 0303 	adc.w	r3, r5, r3
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254a:	4629      	mov	r1, r5
 800254c:	028b      	lsls	r3, r1, #10
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002554:	4621      	mov	r1, r4
 8002556:	028a      	lsls	r2, r1, #10
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255e:	2200      	movs	r2, #0
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	61fa      	str	r2, [r7, #28]
 8002564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002568:	f7fd fe2e 	bl	80001c8 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002584:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002598:	4618      	mov	r0, r3
 800259a:	3750      	adds	r7, #80	; 0x50
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200

080025b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0a9b      	lsrs	r3, r3, #10
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08003bec 	.word	0x08003bec

080025f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025f4:	f7ff ffdc 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08003bec 	.word	0x08003bec

08002618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07b      	b.n	8002722 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800263a:	d009      	beq.n	8002650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
 8002642:	e005      	b.n	8002650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe f9a4 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	ea42 0103 	orr.w	r1, r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	f003 0104 	and.w	r1, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	f003 0210 	and.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
    return;
 800276e:	e0d7      	b.n	8002920 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_SPI_IRQHandler+0x66>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	09db      	lsrs	r3, r3, #7
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
    return;
 8002790:	e0c6      	b.n	8002920 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_SPI_IRQHandler+0x8c>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80b4 	beq.w	8002920 <HAL_SPI_IRQHandler+0x1f4>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80ad 	beq.w	8002920 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d011      	beq.n	8002802 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	e00b      	b.n	800281a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
        return;
 8002818:	e082      	b.n	8002920 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d014      	beq.n	8002850 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00c      	beq.n	8002876 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f043 0208 	orr.w	r2, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04f      	beq.n	800291e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800288c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_SPI_IRQHandler+0x17e>
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d034      	beq.n	8002914 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0203 	bic.w	r2, r2, #3
 80028b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d011      	beq.n	80028e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_SPI_IRQHandler+0x1fc>)
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fdae 	bl	8001430 <HAL_DMA_Abort_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f2:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_SPI_IRQHandler+0x1fc>)
 80028f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fd98 	bl	8001430 <HAL_DMA_Abort_IT>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002912:	e003      	b.n	800291c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f809 	bl	800292c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800291a:	e000      	b.n	800291e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800291c:	bf00      	nop
    return;
 800291e:	bf00      	nop
  }
}
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	08002941 	.word	0x08002941

0800292c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff ffe6 	bl	800292c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e03f      	b.n	80029fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f8da 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fe69 	bl	8003684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d11d      	bne.n	8002a58 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UART_Receive_DMA+0x26>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e016      	b.n	8002a5a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Receive_DMA+0x38>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e00f      	b.n	8002a5a <HAL_UART_Receive_DMA+0x58>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fbb8 	bl	80031c4 <UART_Start_Receive_DMA>
 8002a54:	4603      	mov	r3, r0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ba      	sub	sp, #232	; 0xe8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_UART_IRQHandler+0x66>
 8002ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fd23 	bl	800350e <UART_Receive_IT>
      return;
 8002ac8:	e256      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80de 	beq.w	8002c90 <HAL_UART_IRQHandler+0x22c>
 8002ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80d1 	beq.w	8002c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xae>
 8002afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_UART_IRQHandler+0xd2>
 8002b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_UART_IRQHandler+0xf6>
 8002b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d011      	beq.n	8002b8a <HAL_UART_IRQHandler+0x126>
 8002b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0208 	orr.w	r2, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 81ed 	beq.w	8002f6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x14e>
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fcae 	bl	800350e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_UART_IRQHandler+0x17a>
 8002bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04f      	beq.n	8002c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fbb6 	bl	8003350 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d141      	bne.n	8002c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3314      	adds	r3, #20
 8002c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1d9      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	4a7d      	ldr	r2, [pc, #500]	; (8002e40 <HAL_UART_IRQHandler+0x3dc>)
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fbec 	bl	8001430 <HAL_DMA_Abort_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e00e      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f99a 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e00a      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f996 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	e006      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f992 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c8a:	e170      	b.n	8002f6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	bf00      	nop
    return;
 8002c8e:	e16e      	b.n	8002f6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 814a 	bne.w	8002f2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8143 	beq.w	8002f2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 813c 	beq.w	8002f2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	f040 80b4 	bne.w	8002e44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8140 	beq.w	8002f72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	f080 8139 	bcs.w	8002f72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d12:	f000 8088 	beq.w	8002e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1d9      	bne.n	8002d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3314      	adds	r3, #20
 8002d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3314      	adds	r3, #20
 8002d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e1      	bne.n	8002d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3314      	adds	r3, #20
 8002da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e3      	bne.n	8002d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	f023 0310 	bic.w	r3, r3, #16
 8002dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e08:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e3      	bne.n	8002de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fa95 	bl	8001350 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8c0 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e3c:	e099      	b.n	8002f72 <HAL_UART_IRQHandler+0x50e>
 8002e3e:	bf00      	nop
 8002e40:	08003417 	.word	0x08003417
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 808b 	beq.w	8002f76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8086 	beq.w	8002f76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e8e:	647a      	str	r2, [r7, #68]	; 0x44
 8002e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e3      	bne.n	8002e6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3314      	adds	r3, #20
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e3      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0310 	bic.w	r3, r3, #16
 8002efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f0c:	61fa      	str	r2, [r7, #28]
 8002f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	617b      	str	r3, [r7, #20]
   return(result);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e3      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f848 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f2c:	e023      	b.n	8002f76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_UART_IRQHandler+0x4ea>
 8002f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa79 	bl	800343e <UART_Transmit_IT>
    return;
 8002f4c:	e014      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00e      	beq.n	8002f78 <HAL_UART_IRQHandler+0x514>
 8002f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fab9 	bl	80034de <UART_EndTransmit_IT>
    return;
 8002f6c:	e004      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
    return;
 8002f6e:	bf00      	nop
 8002f70:	e002      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
      return;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
      return;
 8002f76:	bf00      	nop
  }
}
 8002f78:	37e8      	adds	r7, #232	; 0xe8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop

08002f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b09c      	sub	sp, #112	; 0x70
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d172      	bne.n	80030d6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300c:	66bb      	str	r3, [r7, #104]	; 0x68
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003016:	65ba      	str	r2, [r7, #88]	; 0x58
 8003018:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800301c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e5      	bne.n	8002ff6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3314      	adds	r3, #20
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	667b      	str	r3, [r7, #100]	; 0x64
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3314      	adds	r3, #20
 8003048:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800304a:	647a      	str	r2, [r7, #68]	; 0x44
 800304c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003052:	e841 2300 	strex	r3, r2, [r1]
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1e5      	bne.n	800302a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3314      	adds	r3, #20
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	623b      	str	r3, [r7, #32]
   return(result);
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003074:	663b      	str	r3, [r7, #96]	; 0x60
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800307e:	633a      	str	r2, [r7, #48]	; 0x30
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e5      	bne.n	800305e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d119      	bne.n	80030d6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f023 0310 	bic.w	r3, r3, #16
 80030b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	330c      	adds	r3, #12
 80030c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030c2:	61fa      	str	r2, [r7, #28]
 80030c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	617b      	str	r3, [r7, #20]
   return(result);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e5      	bne.n	80030a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d106      	bne.n	80030ec <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030e2:	4619      	mov	r1, r3
 80030e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030e6:	f7ff ff69 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030ea:	e002      	b.n	80030f2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80030ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030ee:	f7fd f9ed 	bl	80004cc <HAL_UART_RxCpltCallback>
}
 80030f2:	bf00      	nop
 80030f4:	3770      	adds	r7, #112	; 0x70
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	2b01      	cmp	r3, #1
 800310e:	d108      	bne.n	8003122 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	4619      	mov	r1, r3
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff ff4e 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003120:	e002      	b.n	8003128 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff ff36 	bl	8002f94 <HAL_UART_RxHalfCpltCallback>
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b80      	cmp	r3, #128	; 0x80
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b21      	cmp	r3, #33	; 0x21
 8003162:	d108      	bne.n	8003176 <UART_DMAError+0x46>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003170:	68b8      	ldr	r0, [r7, #8]
 8003172:	f000 f8c5 	bl	8003300 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b22      	cmp	r3, #34	; 0x22
 8003196:	d108      	bne.n	80031aa <UART_DMAError+0x7a>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80031a4:	68b8      	ldr	r0, [r7, #8]
 80031a6:	f000 f8d3 	bl	8003350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0210 	orr.w	r2, r3, #16
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031b6:	68b8      	ldr	r0, [r7, #8]
 80031b8:	f7ff fef6 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b098      	sub	sp, #96	; 0x60
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	88fa      	ldrh	r2, [r7, #6]
 80031dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2222      	movs	r2, #34	; 0x22
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <UART_Start_Receive_DMA+0x130>)
 80031f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <UART_Start_Receive_DMA+0x134>)
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <UART_Start_Receive_DMA+0x138>)
 8003202:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	2200      	movs	r2, #0
 800320a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	f7fe f83c 	bl	80012a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d019      	beq.n	8003282 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800325e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003264:	65bb      	str	r3, [r7, #88]	; 0x58
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800326e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003274:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800327c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e5      	bne.n	800324e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3314      	adds	r3, #20
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	657b      	str	r3, [r7, #84]	; 0x54
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e5      	bne.n	8003282 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	617b      	str	r3, [r7, #20]
   return(result);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032cc:	653b      	str	r3, [r7, #80]	; 0x50
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3314      	adds	r3, #20
 80032d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032d6:	627a      	str	r2, [r7, #36]	; 0x24
 80032d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6a39      	ldr	r1, [r7, #32]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3760      	adds	r7, #96	; 0x60
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	08002fd5 	.word	0x08002fd5
 80032f8:	080030fb 	.word	0x080030fb
 80032fc:	08003131 	.word	0x08003131

08003300 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	60bb      	str	r3, [r7, #8]
   return(result);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	61ba      	str	r2, [r7, #24]
 800332a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6979      	ldr	r1, [r7, #20]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	613b      	str	r3, [r7, #16]
   return(result);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e5      	bne.n	8003308 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003344:	bf00      	nop
 8003346:	3724      	adds	r7, #36	; 0x24
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b095      	sub	sp, #84	; 0x54
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	330c      	adds	r3, #12
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003378:	643a      	str	r2, [r7, #64]	; 0x40
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800337e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3314      	adds	r3, #20
 8003392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	61fb      	str	r3, [r7, #28]
   return(result);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3314      	adds	r3, #20
 80033aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e5      	bne.n	800338c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d119      	bne.n	80033fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f023 0310 	bic.w	r3, r3, #16
 80033de:	647b      	str	r3, [r7, #68]	; 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033e8:	61ba      	str	r2, [r7, #24]
 80033ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6979      	ldr	r1, [r7, #20]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	613b      	str	r3, [r7, #16]
   return(result);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e5      	bne.n	80033c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
}
 800340a:	bf00      	nop
 800340c:	3754      	adds	r7, #84	; 0x54
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fdb9 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800343e:	b480      	push	{r7}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b21      	cmp	r3, #33	; 0x21
 8003450:	d13e      	bne.n	80034d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d114      	bne.n	8003486 <UART_Transmit_IT+0x48>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d110      	bne.n	8003486 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003478:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	1c9a      	adds	r2, r3, #2
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	621a      	str	r2, [r3, #32]
 8003484:	e008      	b.n	8003498 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6211      	str	r1, [r2, #32]
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4619      	mov	r1, r3
 80034a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fd3e 	bl	8002f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b08c      	sub	sp, #48	; 0x30
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b22      	cmp	r3, #34	; 0x22
 8003520:	f040 80ab 	bne.w	800367a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352c:	d117      	bne.n	800355e <UART_Receive_IT+0x50>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d113      	bne.n	800355e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	b29b      	uxth	r3, r3
 8003548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354c:	b29a      	uxth	r2, r3
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	1c9a      	adds	r2, r3, #2
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
 800355c:	e026      	b.n	80035ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d007      	beq.n	8003582 <UART_Receive_IT+0x74>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <UART_Receive_IT+0x82>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e008      	b.n	80035a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800359c:	b2da      	uxtb	r2, r3
 800359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4619      	mov	r1, r3
 80035ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d15a      	bne.n	8003676 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0220 	bic.w	r2, r2, #32
 80035ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d135      	bne.n	800366c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	613b      	str	r3, [r7, #16]
   return(result);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f023 0310 	bic.w	r3, r3, #16
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	623a      	str	r2, [r7, #32]
 8003628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	69f9      	ldr	r1, [r7, #28]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	61bb      	str	r3, [r7, #24]
   return(result);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e5      	bne.n	8003606 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b10      	cmp	r3, #16
 8003646:	d10a      	bne.n	800365e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fca9 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
 800366a:	e002      	b.n	8003672 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fc ff2d 	bl	80004cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e002      	b.n	800367c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3730      	adds	r7, #48	; 0x30
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b0c0      	sub	sp, #256	; 0x100
 800368a:	af00      	add	r7, sp, #0
 800368c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	ea40 0301 	orr.w	r3, r0, r1
 80036ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036dc:	f021 010c 	bic.w	r1, r1, #12
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ea:	430b      	orrs	r3, r1
 80036ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	6999      	ldr	r1, [r3, #24]
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	ea40 0301 	orr.w	r3, r0, r1
 800370a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b8f      	ldr	r3, [pc, #572]	; (8003950 <UART_SetConfig+0x2cc>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d005      	beq.n	8003724 <UART_SetConfig+0xa0>
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <UART_SetConfig+0x2d0>)
 8003720:	429a      	cmp	r2, r3
 8003722:	d104      	bne.n	800372e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7fe ff64 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8003728:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800372c:	e003      	b.n	8003736 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800372e:	f7fe ff4b 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8003732:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003740:	f040 810c 	bne.w	800395c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003748:	2200      	movs	r2, #0
 800374a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800374e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003752:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003756:	4622      	mov	r2, r4
 8003758:	462b      	mov	r3, r5
 800375a:	1891      	adds	r1, r2, r2
 800375c:	65b9      	str	r1, [r7, #88]	; 0x58
 800375e:	415b      	adcs	r3, r3
 8003760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003766:	4621      	mov	r1, r4
 8003768:	eb12 0801 	adds.w	r8, r2, r1
 800376c:	4629      	mov	r1, r5
 800376e:	eb43 0901 	adc.w	r9, r3, r1
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003786:	4690      	mov	r8, r2
 8003788:	4699      	mov	r9, r3
 800378a:	4623      	mov	r3, r4
 800378c:	eb18 0303 	adds.w	r3, r8, r3
 8003790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003794:	462b      	mov	r3, r5
 8003796:	eb49 0303 	adc.w	r3, r9, r3
 800379a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037b2:	460b      	mov	r3, r1
 80037b4:	18db      	adds	r3, r3, r3
 80037b6:	653b      	str	r3, [r7, #80]	; 0x50
 80037b8:	4613      	mov	r3, r2
 80037ba:	eb42 0303 	adc.w	r3, r2, r3
 80037be:	657b      	str	r3, [r7, #84]	; 0x54
 80037c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037c8:	f7fc fcfe 	bl	80001c8 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <UART_SetConfig+0x2d4>)
 80037d2:	fba3 2302 	umull	r2, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	011c      	lsls	r4, r3, #4
 80037da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037ec:	4642      	mov	r2, r8
 80037ee:	464b      	mov	r3, r9
 80037f0:	1891      	adds	r1, r2, r2
 80037f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80037f4:	415b      	adcs	r3, r3
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037fc:	4641      	mov	r1, r8
 80037fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003802:	4649      	mov	r1, r9
 8003804:	eb43 0b01 	adc.w	fp, r3, r1
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003814:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800381c:	4692      	mov	sl, r2
 800381e:	469b      	mov	fp, r3
 8003820:	4643      	mov	r3, r8
 8003822:	eb1a 0303 	adds.w	r3, sl, r3
 8003826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800382a:	464b      	mov	r3, r9
 800382c:	eb4b 0303 	adc.w	r3, fp, r3
 8003830:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003840:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003844:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003848:	460b      	mov	r3, r1
 800384a:	18db      	adds	r3, r3, r3
 800384c:	643b      	str	r3, [r7, #64]	; 0x40
 800384e:	4613      	mov	r3, r2
 8003850:	eb42 0303 	adc.w	r3, r2, r3
 8003854:	647b      	str	r3, [r7, #68]	; 0x44
 8003856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800385a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800385e:	f7fc fcb3 	bl	80001c8 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4611      	mov	r1, r2
 8003868:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <UART_SetConfig+0x2d4>)
 800386a:	fba3 2301 	umull	r2, r3, r3, r1
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2264      	movs	r2, #100	; 0x64
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	1acb      	subs	r3, r1, r3
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800387e:	4b36      	ldr	r3, [pc, #216]	; (8003958 <UART_SetConfig+0x2d4>)
 8003880:	fba3 2302 	umull	r2, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800388c:	441c      	add	r4, r3
 800388e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003898:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800389c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038a0:	4642      	mov	r2, r8
 80038a2:	464b      	mov	r3, r9
 80038a4:	1891      	adds	r1, r2, r2
 80038a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038a8:	415b      	adcs	r3, r3
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038b0:	4641      	mov	r1, r8
 80038b2:	1851      	adds	r1, r2, r1
 80038b4:	6339      	str	r1, [r7, #48]	; 0x30
 80038b6:	4649      	mov	r1, r9
 80038b8:	414b      	adcs	r3, r1
 80038ba:	637b      	str	r3, [r7, #52]	; 0x34
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038c8:	4659      	mov	r1, fp
 80038ca:	00cb      	lsls	r3, r1, #3
 80038cc:	4651      	mov	r1, sl
 80038ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d2:	4651      	mov	r1, sl
 80038d4:	00ca      	lsls	r2, r1, #3
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	4642      	mov	r2, r8
 80038de:	189b      	adds	r3, r3, r2
 80038e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038e4:	464b      	mov	r3, r9
 80038e6:	460a      	mov	r2, r1
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003904:	460b      	mov	r3, r1
 8003906:	18db      	adds	r3, r3, r3
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
 800390a:	4613      	mov	r3, r2
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003916:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800391a:	f7fc fc55 	bl	80001c8 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <UART_SetConfig+0x2d4>)
 8003924:	fba3 1302 	umull	r1, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	3332      	adds	r3, #50	; 0x32
 8003936:	4a08      	ldr	r2, [pc, #32]	; (8003958 <UART_SetConfig+0x2d4>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4422      	add	r2, r4
 800394a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800394c:	e105      	b.n	8003b5a <UART_SetConfig+0x4d6>
 800394e:	bf00      	nop
 8003950:	40011000 	.word	0x40011000
 8003954:	40011400 	.word	0x40011400
 8003958:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003966:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800396a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800396e:	4642      	mov	r2, r8
 8003970:	464b      	mov	r3, r9
 8003972:	1891      	adds	r1, r2, r2
 8003974:	6239      	str	r1, [r7, #32]
 8003976:	415b      	adcs	r3, r3
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800397e:	4641      	mov	r1, r8
 8003980:	1854      	adds	r4, r2, r1
 8003982:	4649      	mov	r1, r9
 8003984:	eb43 0501 	adc.w	r5, r3, r1
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	00eb      	lsls	r3, r5, #3
 8003992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003996:	00e2      	lsls	r2, r4, #3
 8003998:	4614      	mov	r4, r2
 800399a:	461d      	mov	r5, r3
 800399c:	4643      	mov	r3, r8
 800399e:	18e3      	adds	r3, r4, r3
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039a4:	464b      	mov	r3, r9
 80039a6:	eb45 0303 	adc.w	r3, r5, r3
 80039aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039ca:	4629      	mov	r1, r5
 80039cc:	008b      	lsls	r3, r1, #2
 80039ce:	4621      	mov	r1, r4
 80039d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d4:	4621      	mov	r1, r4
 80039d6:	008a      	lsls	r2, r1, #2
 80039d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039dc:	f7fc fbf4 	bl	80001c8 <__aeabi_uldivmod>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <UART_SetConfig+0x4e4>)
 80039e6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	011c      	lsls	r4, r3, #4
 80039ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a00:	4642      	mov	r2, r8
 8003a02:	464b      	mov	r3, r9
 8003a04:	1891      	adds	r1, r2, r2
 8003a06:	61b9      	str	r1, [r7, #24]
 8003a08:	415b      	adcs	r3, r3
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a10:	4641      	mov	r1, r8
 8003a12:	1851      	adds	r1, r2, r1
 8003a14:	6139      	str	r1, [r7, #16]
 8003a16:	4649      	mov	r1, r9
 8003a18:	414b      	adcs	r3, r1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a28:	4659      	mov	r1, fp
 8003a2a:	00cb      	lsls	r3, r1, #3
 8003a2c:	4651      	mov	r1, sl
 8003a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a32:	4651      	mov	r1, sl
 8003a34:	00ca      	lsls	r2, r1, #3
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a44:	464b      	mov	r3, r9
 8003a46:	460a      	mov	r2, r1
 8003a48:	eb42 0303 	adc.w	r3, r2, r3
 8003a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a68:	4649      	mov	r1, r9
 8003a6a:	008b      	lsls	r3, r1, #2
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a72:	4641      	mov	r1, r8
 8003a74:	008a      	lsls	r2, r1, #2
 8003a76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a7a:	f7fc fba5 	bl	80001c8 <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003a84:	fba3 1302 	umull	r1, r3, r3, r2
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	2164      	movs	r1, #100	; 0x64
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	3332      	adds	r3, #50	; 0x32
 8003a96:	4a34      	ldr	r2, [pc, #208]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa2:	441c      	add	r4, r3
 8003aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	673b      	str	r3, [r7, #112]	; 0x70
 8003aac:	677a      	str	r2, [r7, #116]	; 0x74
 8003aae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	1891      	adds	r1, r2, r2
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	415b      	adcs	r3, r3
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	1851      	adds	r1, r2, r1
 8003ac6:	6039      	str	r1, [r7, #0]
 8003ac8:	4649      	mov	r1, r9
 8003aca:	414b      	adcs	r3, r1
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ada:	4659      	mov	r1, fp
 8003adc:	00cb      	lsls	r3, r1, #3
 8003ade:	4651      	mov	r1, sl
 8003ae0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae4:	4651      	mov	r1, sl
 8003ae6:	00ca      	lsls	r2, r1, #3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	4603      	mov	r3, r0
 8003aee:	4642      	mov	r2, r8
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003af4:	464b      	mov	r3, r9
 8003af6:	460a      	mov	r2, r1
 8003af8:	eb42 0303 	adc.w	r3, r2, r3
 8003afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	663b      	str	r3, [r7, #96]	; 0x60
 8003b08:	667a      	str	r2, [r7, #100]	; 0x64
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b16:	4649      	mov	r1, r9
 8003b18:	008b      	lsls	r3, r1, #2
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b20:	4641      	mov	r1, r8
 8003b22:	008a      	lsls	r2, r1, #2
 8003b24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b28:	f7fc fb4e 	bl	80001c8 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003b32:	fba3 1302 	umull	r1, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4422      	add	r2, r4
 8003b58:	609a      	str	r2, [r3, #8]
}
 8003b5a:	bf00      	nop
 8003b5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	51eb851f 	.word	0x51eb851f

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	4d0d      	ldr	r5, [pc, #52]	; (8003ba4 <__libc_init_array+0x38>)
 8003b70:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	2600      	movs	r6, #0
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	4d0b      	ldr	r5, [pc, #44]	; (8003bac <__libc_init_array+0x40>)
 8003b7e:	4c0c      	ldr	r4, [pc, #48]	; (8003bb0 <__libc_init_array+0x44>)
 8003b80:	f000 f820 	bl	8003bc4 <_init>
 8003b84:	1b64      	subs	r4, r4, r5
 8003b86:	10a4      	asrs	r4, r4, #2
 8003b88:	2600      	movs	r6, #0
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08003c04 	.word	0x08003c04
 8003ba8:	08003c04 	.word	0x08003c04
 8003bac:	08003c04 	.word	0x08003c04
 8003bb0:	08003c08 	.word	0x08003c08

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_init>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr

08003bd0 <_fini>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr
